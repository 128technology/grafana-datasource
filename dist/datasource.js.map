{"version":3,"sources":["../src/datasource.js"],"names":["_","moment","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","token","jsonData","type","url","name","q","options","requests","targets","filter","t","hide","map","target","replace","x","parameters","split","trim","args","toLower","value","datasourceRequest","data","metric","transform","window","end","range","to","utc","format","start","from","resolution","intervalMs","method","headers","then","alias","datapoints","resp","p","date","unix","all","graphQuery","response","status","message","title","get","result","alarm","idx","annotation","number","datasource","enable","showLine","time","text","tags","severity","query","variables"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport moment from 'moment';\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.token = instanceSettings.jsonData.token;\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  query(options) {\n    const requests = options.targets.filter(t => !t.hide).map(x => {\n      const target = this.templateSrv.replace(x.target);\n      const parameters = target.split(',').map(x => x.trim()).map(x => {\n        const args = x.split('=');\n        return { name: _.toLower(args[0]), value: args[1] };\n      });\n\n      return this.backendSrv.datasourceRequest({\n        url: this.url + '/api/v1/analytics/runningTransform',\n        data: {\n          metric: x.metric,\n          transform: 'sum',\n          parameters,\n          window: {\n            end: moment(options.range.to).utc().format('YYYY-MM-DDTHH-mm-ss') + 'Z',\n            start: moment(options.range.from).utc().format('YYYY-MM-DDTHH-mm-ss') + 'Z',\n            resolution: options.intervalMs / 1000\n          }\n        },\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + this.token\n        }\n      })\n      .then(resp => {\n       return {\n          target: x.alias || target,\n          datapoints: resp.data.map(p => [p.value, moment(p.date).unix() * 1000])\n        }\n      });\n    });\n\n    return this.q.all(requests).then(x => {\n      return {\n        data: x\n      };\n    })\n  }\n\n  testDatasource() {\n    return this.graphQuery('query { authority { name } }')\n      .then(response => {\n        if (response.status !== 200) {\n          return { status: \"error\", message: `Target returned a ${response.status}`, title: \"Error\" };\n        }\n\n        if (_.get(response, 'data.data.authority.name', null) === null) {\n          return { status: \"error\", message: `Connection successful but query returned invalid data.`, title: \"Error\" };\n        }\n\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      });\n  }\n\n  annotationQuery(options) {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/api/v1/alarm',\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + this.token\n      }\n    }).then(result => {\n      return result.data.map((alarm, idx) => {\n        return {\n          annotation: {\n            name: 'Alarm #' + alarm.number,\n            datasource: options.annotation.datasource,\n            enable: options.annotation.enable,\n            showLine: true,\n          },\n          title: 'Alarm #' + alarm.number,\n          time: moment(alarm.time).unix() * 1000 + idx,\n          text: alarm.message,\n          tags: alarm.severity\n        };\n      })\n    });\n  }\n\n  graphQuery(query, variables) {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/api/v1/graphql',\n      data: { query, variables },\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + this.token\n      }\n    });\n  }\n}\n"]}